import { __decorate, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ladda-config';
let LaddaDirective = class LaddaDirective {
    constructor(el, config, platformId) {
        this.platformId = platformId;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (let attribute in configAttributes) {
            let configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                let value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    ngOnChanges(changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(() => { this.updateLadda(false); }, 0);
    }
    ngOnDestroy() {
        if (this.ladda) {
            this.ladda.remove();
        }
    }
    updateLadda(previousValue) {
        let loading = typeof this.loading === 'number' || !!this.loading;
        let wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    }
    updateDisabled() {
        this.el.disabled = this.disabled;
    }
};
LaddaDirective.ɵfac = function LaddaDirective_Factory(t) { return new (t || LaddaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LaddaConfig, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
LaddaDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LaddaDirective, selectors: [["", "ladda", ""]], inputs: { loading: ["ladda", "loading"], disabled: "disabled" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
LaddaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input('ladda')
], LaddaDirective.prototype, "loading", void 0);
__decorate([
    Input()
], LaddaDirective.prototype, "disabled", void 0);
LaddaDirective = __decorate([ __param(1, Inject(LaddaConfig)), __param(1, Optional()),
    __param(2, Inject(PLATFORM_ID))
], LaddaDirective);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaDirective, [{
        type: Directive,
        args: [{
                selector: '[ladda]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.LaddaConfigArgs, decorators: [{
                type: Inject,
                args: [LaddaConfig]
            }, {
                type: Optional
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { loading: [{
            type: Input,
            args: ['ladda']
        }], disabled: [{
            type: Input
        }] }); })();
export { LaddaDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,