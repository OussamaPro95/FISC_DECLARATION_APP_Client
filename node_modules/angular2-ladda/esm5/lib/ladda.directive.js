import { __decorate, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ladda-config';
var LaddaDirective = /** @class */ (function () {
    function LaddaDirective(el, config, platformId) {
        this.platformId = platformId;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (var attribute in configAttributes) {
            var configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                var value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    LaddaDirective.prototype.ngOnChanges = function (changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    };
    LaddaDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(function () { _this.updateLadda(false); }, 0);
    };
    LaddaDirective.prototype.ngOnDestroy = function () {
        if (this.ladda) {
            this.ladda.remove();
        }
    };
    LaddaDirective.prototype.updateLadda = function (previousValue) {
        var loading = typeof this.loading === 'number' || !!this.loading;
        var wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    };
    LaddaDirective.prototype.updateDisabled = function () {
        this.el.disabled = this.disabled;
    };
    LaddaDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('ladda')
    ], LaddaDirective.prototype, "loading", void 0);
    __decorate([
        Input()
    ], LaddaDirective.prototype, "disabled", void 0);
    LaddaDirective = __decorate([ __param(1, Inject(LaddaConfig)), __param(1, Optional()),
        __param(2, Inject(PLATFORM_ID))
    ], LaddaDirective);
LaddaDirective.ɵfac = function LaddaDirective_Factory(t) { return new (t || LaddaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LaddaConfig, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
LaddaDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LaddaDirective, selectors: [["", "ladda", ""]], inputs: { loading: ["ladda", "loading"], disabled: "disabled" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaDirective, [{
        type: Directive,
        args: [{
                selector: '[ladda]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.LaddaConfigArgs, decorators: [{
                type: Inject,
                args: [LaddaConfig]
            }, {
                type: Optional
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { loading: [{
            type: Input,
            args: ['ladda']
        }], disabled: [{
            type: Input
        }] }); })();
    return LaddaDirective;
}());
export { LaddaDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,