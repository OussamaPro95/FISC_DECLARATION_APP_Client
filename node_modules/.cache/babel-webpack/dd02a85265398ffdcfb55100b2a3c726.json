{"ast":null,"code":"import _createClass from \"E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __param } from 'tslib';\nimport { Injectable, ElementRef, Inject, Optional, PLATFORM_ID, Input, Directive, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\nimport * as ɵngcc0 from '@angular/core';\n\nvar LaddaConfigArgs = function LaddaConfigArgs() {\n  _classCallCheck(this, LaddaConfigArgs);\n};\n\nvar configAttributes = {\n  \"data-style\": \"style\",\n  \"data-spinner-size\": \"spinnerSize\",\n  \"data-spinner-color\": \"spinnerColor\",\n  \"data-spinner-lines\": \"spinnerLines\"\n};\n\nvar LaddaConfig = function LaddaConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, LaddaConfig);\n\n  Object.assign(this, config);\n};\n\nLaddaConfig.ɵfac = function LaddaConfig_Factory(t) {\n  return new (t || LaddaConfig)(ɵngcc0.ɵɵinject(LaddaConfigArgs));\n};\n\nLaddaConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LaddaConfig,\n  factory: function factory(t) {\n    return LaddaConfig.ɵfac(t);\n  }\n});\n\nLaddaConfig.ctorParameters = function () {\n  return [{\n    type: LaddaConfigArgs\n  }];\n};\n\nvar LaddaDirective = /*#__PURE__*/function () {\n  function LaddaDirective(el, config, platformId) {\n    _classCallCheck(this, LaddaDirective);\n\n    this.platformId = platformId;\n    this.el = el.nativeElement;\n\n    if (!config) {\n      return;\n    } // apply default styles if they aren't overwritten by an attribute\n\n\n    for (var attribute in configAttributes) {\n      var configValue = config[configAttributes[attribute]];\n\n      if (!configValue) {\n        continue; // don't waste time reading the attribute\n      }\n\n      if (!this.el.getAttribute(attribute)) {\n        // attribute isn't set - apply the default config value\n        var value = typeof configValue === \"number\" ? configValue.toString() : configValue;\n        this.el.setAttribute(attribute, value);\n      }\n    }\n  }\n\n  _createClass(LaddaDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.ladda) {\n        return; // needed since ngOnChanges is called before ngOnInit\n      }\n\n      if (changes.loading) {\n        this.updateLadda(changes.loading.previousValue);\n      }\n\n      if (changes.disabled) {\n        this.updateDisabled();\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      if (!isPlatformBrowser(this.platformId)) {\n        return;\n      }\n\n      this.ladda = create(this.el); // if the initial loading value isn't false, a timeout of 0 ms\n      // is necessary for the calculated spinner size to be correct.\n\n      setTimeout(function () {\n        _this.updateLadda(false);\n      }, 0);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.ladda) {\n        this.ladda.remove();\n      }\n    }\n  }, {\n    key: \"updateLadda\",\n    value: function updateLadda(previousValue) {\n      var loading = typeof this.loading === 'number' || !!this.loading;\n      var wasLoading = typeof previousValue === 'number' || !!previousValue;\n\n      if (!loading) {\n        if (wasLoading) {\n          this.ladda.stop();\n        }\n\n        return this.updateDisabled();\n      }\n\n      if (!wasLoading) {\n        this.ladda.start();\n      }\n\n      if (typeof this.loading === 'number') {\n        this.ladda.setProgress(this.loading);\n      }\n    }\n  }, {\n    key: \"updateDisabled\",\n    value: function updateDisabled() {\n      this.el.disabled = this.disabled;\n    }\n  }]);\n\n  return LaddaDirective;\n}();\n\nLaddaDirective.ɵfac = function LaddaDirective_Factory(t) {\n  return new (t || LaddaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LaddaConfig, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLaddaDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: LaddaDirective,\n  selectors: [[\"\", \"ladda\", \"\"]],\n  inputs: {\n    loading: [\"ladda\", \"loading\"],\n    disabled: \"disabled\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nLaddaDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: LaddaConfigArgs,\n    decorators: [{\n      type: Inject,\n      args: [LaddaConfig]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\n__decorate([Input('ladda')], LaddaDirective.prototype, \"loading\", void 0);\n\n__decorate([Input()], LaddaDirective.prototype, \"disabled\", void 0);\n\nLaddaDirective = __decorate([__param(1, Inject(LaddaConfig)), __param(1, Optional()), __param(2, Inject(PLATFORM_ID))], LaddaDirective);\nvar LaddaModule_1;\n\nvar LaddaModule = LaddaModule_1 = /*#__PURE__*/function () {\n  function LaddaModule() {\n    _classCallCheck(this, LaddaModule);\n  }\n\n  _createClass(LaddaModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      return {\n        ngModule: LaddaModule_1,\n        providers: [{\n          provide: LaddaConfig,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return LaddaModule;\n}();\n\nLaddaModule.ɵfac = function LaddaModule_Factory(t) {\n  return new (t || LaddaModule)();\n};\n\nLaddaModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: LaddaModule\n});\nLaddaModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaConfig, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LaddaConfigArgs\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ladda]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LaddaConfigArgs,\n      decorators: [{\n        type: Inject,\n        args: [LaddaConfig]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    loading: [{\n      type: Input,\n      args: ['ladda']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LaddaDirective],\n      exports: [LaddaDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LaddaModule, {\n    declarations: [LaddaDirective],\n    exports: [LaddaDirective]\n  });\n})();\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes }; //# sourceMappingURL=angular2-ladda.js.map","map":{"version":3,"sources":["E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/angular2-ladda/fesm2015/angular2-ladda.js"],"names":["__decorate","__param","Injectable","ElementRef","Inject","Optional","PLATFORM_ID","Input","Directive","NgModule","isPlatformBrowser","create","ɵngcc0","LaddaConfigArgs","configAttributes","LaddaConfig","config","Object","assign","ɵfac","LaddaConfig_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","LaddaDirective","el","platformId","nativeElement","attribute","configValue","getAttribute","value","toString","setAttribute","changes","ladda","loading","updateLadda","previousValue","disabled","updateDisabled","setTimeout","remove","wasLoading","stop","start","setProgress","LaddaDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","features","ɵɵNgOnChangesFeature","decorators","args","prototype","LaddaModule_1","LaddaModule","ngModule","providers","provide","useValue","LaddaModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","selector","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Injectable, ElementRef, Inject, Optional, PLATFORM_ID, Input, Directive, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\n\nimport * as ɵngcc0 from '@angular/core';\nclass LaddaConfigArgs {\r\n}\r\nlet configAttributes = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\nlet LaddaConfig = class LaddaConfig {\r\n    constructor(config = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n};\nLaddaConfig.ɵfac = function LaddaConfig_Factory(t) { return new (t || LaddaConfig)(ɵngcc0.ɵɵinject(LaddaConfigArgs)); };\nLaddaConfig.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LaddaConfig, factory: function (t) { return LaddaConfig.ɵfac(t); } });\r\nLaddaConfig.ctorParameters = () => [\r\n    { type: LaddaConfigArgs }\r\n];\n\nlet LaddaDirective = class LaddaDirective {\r\n    constructor(el, config, platformId) {\r\n        this.platformId = platformId;\r\n        this.el = el.nativeElement;\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n        this.ladda = create(this.el);\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n    updateLadda(previousValue) {\r\n        let loading = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading = typeof previousValue === 'number' || !!previousValue;\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n            return this.updateDisabled();\r\n        }\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n    updateDisabled() {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n};\nLaddaDirective.ɵfac = function LaddaDirective_Factory(t) { return new (t || LaddaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LaddaConfig, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nLaddaDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LaddaDirective, selectors: [[\"\", \"ladda\", \"\"]], inputs: { loading: [\"ladda\", \"loading\"], disabled: \"disabled\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nLaddaDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input('ladda')\r\n], LaddaDirective.prototype, \"loading\", void 0);\r\n__decorate([\r\n    Input()\r\n], LaddaDirective.prototype, \"disabled\", void 0);\r\nLaddaDirective = __decorate([ __param(1, Inject(LaddaConfig)), __param(1, Optional()),\r\n    __param(2, Inject(PLATFORM_ID))\r\n], LaddaDirective);\n\nvar LaddaModule_1;\r\nlet LaddaModule = LaddaModule_1 = class LaddaModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: LaddaModule_1,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n};\nLaddaModule.ɵfac = function LaddaModule_Factory(t) { return new (t || LaddaModule)(); };\nLaddaModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LaddaModule });\nLaddaModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaConfig, [{\n        type: Injectable\n    }], function () { return [{ type: LaddaConfigArgs }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ladda]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LaddaConfigArgs, decorators: [{\n                type: Inject,\n                args: [LaddaConfig]\n            }, {\n                type: Optional\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { loading: [{\n            type: Input,\n            args: ['ladda']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaddaModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [LaddaDirective],\n                exports: [LaddaDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LaddaModule, { declarations: [LaddaDirective], exports: [LaddaDirective] }); })();\n\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes };\n\n//# sourceMappingURL=angular2-ladda.js.map"]},"metadata":{},"sourceType":"module"}