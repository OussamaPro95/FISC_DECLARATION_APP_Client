{"ast":null,"code":"import _classCallCheck from \"E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport { init } from 'echarts';\nimport { of, EMPTY, fromEvent, Observable } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar ChangeFilter = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changes\n   */\n  function ChangeFilter(_changes) {\n    _classCallCheck(this, ChangeFilter);\n\n    this._changes = _changes;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(ChangeFilter, [{\n    key: \"notEmpty\",\n    value:\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    function notEmpty(key) {\n      if (this._changes[key]) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (this._changes[key]) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"notFirst\",\n    value: function notFirst(key) {\n      if (this._changes[key] && !this._changes[key].isFirstChange()) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n        return of(value);\n      }\n\n      return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"notFirstAndEmpty\",\n    value: function notFirstAndEmpty(key) {\n      if (this._changes[key] && !this._changes[key].isFirstChange()) {\n        /** @type {?} */\n        var value = this._changes[key].currentValue;\n\n        if (value !== undefined && value !== null) {\n          return of(value);\n        }\n      }\n\n      return EMPTY;\n    }\n  }], [{\n    key: \"of\",\n    value: function of(changes) {\n      return new ChangeFilter(changes);\n    }\n  }]);\n\n  return ChangeFilter;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ChangeFilter.prototype._changes;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxEchartsDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} el\n   * @param {?} ngZone\n   */\n  function NgxEchartsDirective(el, ngZone) {\n    _classCallCheck(this, NgxEchartsDirective);\n\n    this.el = el;\n    this.ngZone = ngZone;\n    this.autoResize = true;\n    this.loadingType = 'default';\n    this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version\n    // deprecated, left for compatibility reasons to avoid triggering major version\n    // ngx-echarts events\n\n    this.chartInit = new EventEmitter(); // echarts mouse events\n\n    this.chartClick = this.createLazyEvent('click');\n    this.chartDblClick = this.createLazyEvent('dblclick');\n    this.chartMouseDown = this.createLazyEvent('mousedown');\n    this.chartMouseMove = this.createLazyEvent('mousemove');\n    this.chartMouseUp = this.createLazyEvent('mouseup');\n    this.chartMouseOver = this.createLazyEvent('mouseover');\n    this.chartMouseOut = this.createLazyEvent('mouseout');\n    this.chartGlobalOut = this.createLazyEvent('globalout');\n    this.chartContextMenu = this.createLazyEvent('contextmenu'); // echarts mouse events\n\n    this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n    this.chartLegendSelected = this.createLazyEvent('legendselected');\n    this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n    this.chartLegendScroll = this.createLazyEvent('legendscroll');\n    this.chartDataZoom = this.createLazyEvent('datazoom');\n    this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n    this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n    this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n    this.chartRestore = this.createLazyEvent('restore');\n    this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n    this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n    this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n    this.chartPieSelected = this.createLazyEvent('pieselected');\n    this.chartPieUnselected = this.createLazyEvent('pieunselected');\n    this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n    this.chartMapSelected = this.createLazyEvent('mapselected');\n    this.chartMapUnselected = this.createLazyEvent('mapunselected');\n    this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n    this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n    this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n    this.chartBrush = this.createLazyEvent('brush');\n    this.chartBrushSelected = this.createLazyEvent('brushselected');\n    this.chartRendered = this.createLazyEvent('rendered');\n    this.chartFinished = this.createLazyEvent('finished');\n    this.currentOffsetWidth = 0;\n    this.currentOffsetHeight = 0;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(NgxEchartsDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this = this;\n\n      /** @type {?} */\n      var filter = ChangeFilter.of(changes);\n      filter.notFirstAndEmpty('options').subscribe(\n      /**\n      * @param {?} opt\n      * @return {?}\n      */\n      function (opt) {\n        return _this.onOptionsChange(opt);\n      });\n      filter.notFirstAndEmpty('merge').subscribe(\n      /**\n      * @param {?} opt\n      * @return {?}\n      */\n      function (opt) {\n        return _this.setOption(opt);\n      });\n      filter.has('loading').subscribe(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        return _this.toggleLoading(!!v);\n      });\n      filter.notFirst('theme').subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this.refreshChart();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this2.autoResize && window.innerWidth !== _this2.currentWindowWidth) {\n          _this2.currentWindowWidth = window.innerWidth;\n          _this2.currentOffsetWidth = _this2.el.nativeElement.offsetWidth;\n          _this2.currentOffsetHeight = _this2.el.nativeElement.offsetHeight;\n\n          _this2.resize();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.resizeSub) {\n        this.resizeSub.unsubscribe();\n      }\n\n      this.dispose();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      // No heavy work in DoCheck!\n      if (this.chart && this.autoResize) {\n        /** @type {?} */\n        var offsetWidth = this.el.nativeElement.offsetWidth;\n        /** @type {?} */\n\n        var offsetHeight = this.el.nativeElement.offsetHeight;\n\n        if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n          this.currentOffsetWidth = offsetWidth;\n          this.currentOffsetHeight = offsetHeight;\n          this.resize();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this3.initChart();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.chart) {\n        this.chart.dispose();\n        this.chart = null;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n    /**\n     * @private\n     * @param {?} loading\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleLoading\",\n    value: function toggleLoading(loading) {\n      if (this.chart) {\n        loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n      }\n    }\n    /**\n     * @private\n     * @param {?} option\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOption\",\n    value: function setOption(option, opts) {\n      if (this.chart) {\n        this.chart.setOption(option, opts);\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"refreshChart\",\n    value: function refreshChart() {\n      this.dispose();\n      this.initChart();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"createChart\",\n    value: function createChart() {\n      var _this4 = this;\n\n      this.currentWindowWidth = window.innerWidth;\n      this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n      this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n      /** @type {?} */\n\n      var dom = this.el.nativeElement;\n\n      if (window && window.getComputedStyle) {\n        /** @type {?} */\n        var prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n\n        if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n          dom.style.height = '400px';\n        }\n      }\n\n      return this.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return init(dom, _this4.theme, _this4.initOpts);\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"initChart\",\n    value: function initChart() {\n      this.onOptionsChange(this.options);\n\n      if (this.merge && this.chart) {\n        this.setOption(this.merge);\n      }\n    }\n    /**\n     * @private\n     * @param {?} opt\n     * @return {?}\n     */\n\n  }, {\n    key: \"onOptionsChange\",\n    value: function onOptionsChange(opt) {\n      if (opt) {\n        if (!this.chart) {\n          this.chart = this.createChart();\n          this.chartInit.emit(this.chart);\n        }\n\n        this.chart.setOption(this.options, true);\n      }\n    } // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n\n    /**\n     * @private\n     * @template T\n     * @param {?} eventName\n     * @return {?}\n     */\n\n  }, {\n    key: \"createLazyEvent\",\n    value: function createLazyEvent(eventName) {\n      var _this5 = this;\n\n      return this.chartInit.pipe(switchMap(\n      /**\n      * @param {?} chart\n      * @return {?}\n      */\n      function (chart) {\n        return new Observable(\n        /**\n        * @param {?} observer\n        * @return {?}\n        */\n        function (observer) {\n          chart.on(eventName,\n          /**\n          * @param {?} data\n          * @return {?}\n          */\n          function (data) {\n            return _this5.ngZone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return observer.next(data);\n            });\n          });\n          return (\n            /**\n            * @return {?}\n            */\n            function () {\n              return chart.off(eventName);\n            }\n          );\n        });\n      }));\n    }\n  }]);\n\n  return NgxEchartsDirective;\n}();\n\nNgxEchartsDirective.Éµfac = function NgxEchartsDirective_Factory(t) {\n  return new (t || NgxEchartsDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nNgxEchartsDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: NgxEchartsDirective,\n  selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]],\n  inputs: {\n    autoResize: \"autoResize\",\n    loadingType: \"loadingType\",\n    detectEventChanges: \"detectEventChanges\",\n    options: \"options\",\n    theme: \"theme\",\n    loading: \"loading\",\n    initOpts: \"initOpts\",\n    merge: \"merge\",\n    loadingOpts: \"loadingOpts\"\n  },\n  outputs: {\n    chartInit: \"chartInit\",\n    chartClick: \"chartClick\",\n    chartDblClick: \"chartDblClick\",\n    chartMouseDown: \"chartMouseDown\",\n    chartMouseMove: \"chartMouseMove\",\n    chartMouseUp: \"chartMouseUp\",\n    chartMouseOver: \"chartMouseOver\",\n    chartMouseOut: \"chartMouseOut\",\n    chartGlobalOut: \"chartGlobalOut\",\n    chartContextMenu: \"chartContextMenu\",\n    chartLegendSelectChanged: \"chartLegendSelectChanged\",\n    chartLegendSelected: \"chartLegendSelected\",\n    chartLegendUnselected: \"chartLegendUnselected\",\n    chartLegendScroll: \"chartLegendScroll\",\n    chartDataZoom: \"chartDataZoom\",\n    chartDataRangeSelected: \"chartDataRangeSelected\",\n    chartTimelineChanged: \"chartTimelineChanged\",\n    chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n    chartRestore: \"chartRestore\",\n    chartDataViewChanged: \"chartDataViewChanged\",\n    chartMagicTypeChanged: \"chartMagicTypeChanged\",\n    chartPieSelectChanged: \"chartPieSelectChanged\",\n    chartPieSelected: \"chartPieSelected\",\n    chartPieUnselected: \"chartPieUnselected\",\n    chartMapSelectChanged: \"chartMapSelectChanged\",\n    chartMapSelected: \"chartMapSelected\",\n    chartMapUnselected: \"chartMapUnselected\",\n    chartAxisAreaSelected: \"chartAxisAreaSelected\",\n    chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\",\n    chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\",\n    chartBrush: \"chartBrush\",\n    chartBrushSelected: \"chartBrushSelected\",\n    chartRendered: \"chartRendered\",\n    chartFinished: \"chartFinished\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n/** @nocollapse */\n\nNgxEchartsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nNgxEchartsDirective.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }],\n  loading: [{\n    type: Input\n  }],\n  initOpts: [{\n    type: Input\n  }],\n  merge: [{\n    type: Input\n  }],\n  autoResize: [{\n    type: Input\n  }],\n  loadingType: [{\n    type: Input\n  }],\n  loadingOpts: [{\n    type: Input\n  }],\n  detectEventChanges: [{\n    type: Input\n  }],\n  chartInit: [{\n    type: Output\n  }],\n  chartClick: [{\n    type: Output\n  }],\n  chartDblClick: [{\n    type: Output\n  }],\n  chartMouseDown: [{\n    type: Output\n  }],\n  chartMouseMove: [{\n    type: Output\n  }],\n  chartMouseUp: [{\n    type: Output\n  }],\n  chartMouseOver: [{\n    type: Output\n  }],\n  chartMouseOut: [{\n    type: Output\n  }],\n  chartGlobalOut: [{\n    type: Output\n  }],\n  chartContextMenu: [{\n    type: Output\n  }],\n  chartLegendSelectChanged: [{\n    type: Output\n  }],\n  chartLegendSelected: [{\n    type: Output\n  }],\n  chartLegendUnselected: [{\n    type: Output\n  }],\n  chartLegendScroll: [{\n    type: Output\n  }],\n  chartDataZoom: [{\n    type: Output\n  }],\n  chartDataRangeSelected: [{\n    type: Output\n  }],\n  chartTimelineChanged: [{\n    type: Output\n  }],\n  chartTimelinePlayChanged: [{\n    type: Output\n  }],\n  chartRestore: [{\n    type: Output\n  }],\n  chartDataViewChanged: [{\n    type: Output\n  }],\n  chartMagicTypeChanged: [{\n    type: Output\n  }],\n  chartPieSelectChanged: [{\n    type: Output\n  }],\n  chartPieSelected: [{\n    type: Output\n  }],\n  chartPieUnselected: [{\n    type: Output\n  }],\n  chartMapSelectChanged: [{\n    type: Output\n  }],\n  chartMapSelected: [{\n    type: Output\n  }],\n  chartMapUnselected: [{\n    type: Output\n  }],\n  chartAxisAreaSelected: [{\n    type: Output\n  }],\n  chartFocusNodeAdjacency: [{\n    type: Output\n  }],\n  chartUnfocusNodeAdjacency: [{\n    type: Output\n  }],\n  chartBrush: [{\n    type: Output\n  }],\n  chartBrushSelected: [{\n    type: Output\n  }],\n  chartRendered: [{\n    type: Output\n  }],\n  chartFinished: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'echarts, [echarts]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    autoResize: [{\n      type: Input\n    }],\n    loadingType: [{\n      type: Input\n    }],\n    detectEventChanges: [{\n      type: Input\n    }],\n    chartInit: [{\n      type: Output\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartDblClick: [{\n      type: Output\n    }],\n    chartMouseDown: [{\n      type: Output\n    }],\n    chartMouseMove: [{\n      type: Output\n    }],\n    chartMouseUp: [{\n      type: Output\n    }],\n    chartMouseOver: [{\n      type: Output\n    }],\n    chartMouseOut: [{\n      type: Output\n    }],\n    chartGlobalOut: [{\n      type: Output\n    }],\n    chartContextMenu: [{\n      type: Output\n    }],\n    chartLegendSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelected: [{\n      type: Output\n    }],\n    chartLegendUnselected: [{\n      type: Output\n    }],\n    chartLegendScroll: [{\n      type: Output\n    }],\n    chartDataZoom: [{\n      type: Output\n    }],\n    chartDataRangeSelected: [{\n      type: Output\n    }],\n    chartTimelineChanged: [{\n      type: Output\n    }],\n    chartTimelinePlayChanged: [{\n      type: Output\n    }],\n    chartRestore: [{\n      type: Output\n    }],\n    chartDataViewChanged: [{\n      type: Output\n    }],\n    chartMagicTypeChanged: [{\n      type: Output\n    }],\n    chartPieSelectChanged: [{\n      type: Output\n    }],\n    chartPieSelected: [{\n      type: Output\n    }],\n    chartPieUnselected: [{\n      type: Output\n    }],\n    chartMapSelectChanged: [{\n      type: Output\n    }],\n    chartMapSelected: [{\n      type: Output\n    }],\n    chartMapUnselected: [{\n      type: Output\n    }],\n    chartAxisAreaSelected: [{\n      type: Output\n    }],\n    chartFocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartUnfocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartBrush: [{\n      type: Output\n    }],\n    chartBrushSelected: [{\n      type: Output\n    }],\n    chartRendered: [{\n      type: Output\n    }],\n    chartFinished: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    initOpts: [{\n      type: Input\n    }],\n    merge: [{\n      type: Input\n    }],\n    loadingOpts: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NgxEchartsDirective.prototype.options;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.theme;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loading;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.initOpts;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.merge;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.autoResize;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loadingType;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.loadingOpts;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.detectEventChanges;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartInit;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartClick;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDblClick;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseDown;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseMove;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseUp;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseOver;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMouseOut;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartGlobalOut;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartContextMenu;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartLegendScroll;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataZoom;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataRangeSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartTimelineChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartTimelinePlayChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartRestore;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartDataViewChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMagicTypeChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartPieUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapSelectChanged;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartMapUnselected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartAxisAreaSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartFocusNodeAdjacency;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartUnfocusNodeAdjacency;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartBrush;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartBrushSelected;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartRendered;\n  /** @type {?} */\n\n  NgxEchartsDirective.prototype.chartFinished;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.chart;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentOffsetWidth;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentOffsetHeight;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.currentWindowWidth;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.resizeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxEchartsDirective.prototype.ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxEchartsModule = function NgxEchartsModule() {\n  _classCallCheck(this, NgxEchartsModule);\n};\n\nNgxEchartsModule.Éµfac = function NgxEchartsModule_Factory(t) {\n  return new (t || NgxEchartsModule)();\n};\n\nNgxEchartsModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxEchartsModule\n});\nNgxEchartsModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxEchartsDirective],\n      exports: [NgxEchartsDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxEchartsModule, {\n    declarations: [NgxEchartsDirective],\n    exports: [NgxEchartsDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxEchartsModule, NgxEchartsDirective as Éµa }; //# sourceMappingURL=ngx-echarts.js.map","map":{"version":3,"sources":["E:/_Projet/Cnss/gull-admin-full-version-12.0/gull-compact-sidebar/node_modules/ngx-echarts/fesm2015/ngx-echarts.js"],"names":["EventEmitter","Directive","ElementRef","NgZone","Input","Output","NgModule","init","of","EMPTY","fromEvent","Observable","debounceTime","switchMap","Éµngcc0","ChangeFilter","_changes","key","value","currentValue","undefined","isFirstChange","changes","prototype","NgxEchartsDirective","el","ngZone","autoResize","loadingType","detectEventChanges","chartInit","chartClick","createLazyEvent","chartDblClick","chartMouseDown","chartMouseMove","chartMouseUp","chartMouseOver","chartMouseOut","chartGlobalOut","chartContextMenu","chartLegendSelectChanged","chartLegendSelected","chartLegendUnselected","chartLegendScroll","chartDataZoom","chartDataRangeSelected","chartTimelineChanged","chartTimelinePlayChanged","chartRestore","chartDataViewChanged","chartMagicTypeChanged","chartPieSelectChanged","chartPieSelected","chartPieUnselected","chartMapSelectChanged","chartMapSelected","chartMapUnselected","chartAxisAreaSelected","chartFocusNodeAdjacency","chartUnfocusNodeAdjacency","chartBrush","chartBrushSelected","chartRendered","chartFinished","currentOffsetWidth","currentOffsetHeight","filter","notFirstAndEmpty","subscribe","opt","onOptionsChange","setOption","has","v","toggleLoading","notFirst","refreshChart","resizeSub","window","pipe","innerWidth","currentWindowWidth","nativeElement","offsetWidth","offsetHeight","resize","unsubscribe","dispose","chart","setTimeout","initChart","loading","showLoading","loadingOpts","hideLoading","option","opts","dom","getComputedStyle","prop","getPropertyValue","style","height","runOutsideAngular","theme","initOpts","options","merge","createChart","emit","eventName","observer","on","data","run","next","off","Éµfac","NgxEchartsDirective_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","inputs","outputs","features","ÉµÉµNgOnChangesFeature","ctorParameters","propDecorators","ngDevMode","ÉµsetClassMetadata","args","selector","NgxEchartsModule","NgxEchartsModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","imports","declarations","exports","ngJitMode","ÉµÉµsetNgModuleScope","Éµa"],"mappings":"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","sourcesContent":["import { EventEmitter, Directive, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport { init } from 'echarts';\nimport { of, EMPTY, fromEvent, Observable } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as Éµngcc0 from '@angular/core';\nclass ChangeFilter {\n    /**\n     * @param {?} _changes\n     */\n    constructor(_changes) {\n        this._changes = _changes;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    static of(changes) {\n        return new ChangeFilter(changes);\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    notEmpty(key) {\n        if (this._changes[key]) {\n            /** @type {?} */\n            const value = this._changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    has(key) {\n        if (this._changes[key]) {\n            /** @type {?} */\n            const value = this._changes[key].currentValue;\n            return of(value);\n        }\n        return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    notFirst(key) {\n        if (this._changes[key] && !this._changes[key].isFirstChange()) {\n            /** @type {?} */\n            const value = this._changes[key].currentValue;\n            return of(value);\n        }\n        return EMPTY;\n    }\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    notFirstAndEmpty(key) {\n        if (this._changes[key] && !this._changes[key].isFirstChange()) {\n            /** @type {?} */\n            const value = this._changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return EMPTY;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ChangeFilter.prototype._changes;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxEchartsDirective {\n    /**\n     * @param {?} el\n     * @param {?} ngZone\n     */\n    constructor(el, ngZone) {\n        this.el = el;\n        this.ngZone = ngZone;\n        this.autoResize = true;\n        this.loadingType = 'default';\n        this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version\n        // deprecated, left for compatibility reasons to avoid triggering major version\n        // ngx-echarts events\n        this.chartInit = new EventEmitter();\n        // echarts mouse events\n        this.chartClick = this.createLazyEvent('click');\n        this.chartDblClick = this.createLazyEvent('dblclick');\n        this.chartMouseDown = this.createLazyEvent('mousedown');\n        this.chartMouseMove = this.createLazyEvent('mousemove');\n        this.chartMouseUp = this.createLazyEvent('mouseup');\n        this.chartMouseOver = this.createLazyEvent('mouseover');\n        this.chartMouseOut = this.createLazyEvent('mouseout');\n        this.chartGlobalOut = this.createLazyEvent('globalout');\n        this.chartContextMenu = this.createLazyEvent('contextmenu');\n        // echarts mouse events\n        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n        this.chartLegendSelected = this.createLazyEvent('legendselected');\n        this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n        this.chartLegendScroll = this.createLazyEvent('legendscroll');\n        this.chartDataZoom = this.createLazyEvent('datazoom');\n        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n        this.chartRestore = this.createLazyEvent('restore');\n        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n        this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n        this.chartPieSelected = this.createLazyEvent('pieselected');\n        this.chartPieUnselected = this.createLazyEvent('pieunselected');\n        this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n        this.chartMapSelected = this.createLazyEvent('mapselected');\n        this.chartMapUnselected = this.createLazyEvent('mapunselected');\n        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n        this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n        this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n        this.chartBrush = this.createLazyEvent('brush');\n        this.chartBrushSelected = this.createLazyEvent('brushselected');\n        this.chartRendered = this.createLazyEvent('rendered');\n        this.chartFinished = this.createLazyEvent('finished');\n        this.currentOffsetWidth = 0;\n        this.currentOffsetHeight = 0;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const filter = ChangeFilter.of(changes);\n        filter.notFirstAndEmpty('options').subscribe((/**\n         * @param {?} opt\n         * @return {?}\n         */\n        opt => this.onOptionsChange(opt)));\n        filter.notFirstAndEmpty('merge').subscribe((/**\n         * @param {?} opt\n         * @return {?}\n         */\n        opt => this.setOption(opt)));\n        filter.has('loading').subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.toggleLoading(!!v)));\n        filter.notFirst('theme').subscribe((/**\n         * @return {?}\n         */\n        () => this.refreshChart()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autoResize && window.innerWidth !== this.currentWindowWidth) {\n                this.currentWindowWidth = window.innerWidth;\n                this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n                this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n                this.resize();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.resizeSub) {\n            this.resizeSub.unsubscribe();\n        }\n        this.dispose();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        // No heavy work in DoCheck!\n        if (this.chart && this.autoResize) {\n            /** @type {?} */\n            const offsetWidth = this.el.nativeElement.offsetWidth;\n            /** @type {?} */\n            const offsetHeight = this.el.nativeElement.offsetHeight;\n            if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n                this.currentOffsetWidth = offsetWidth;\n                this.currentOffsetHeight = offsetHeight;\n                this.resize();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        setTimeout((/**\n         * @return {?}\n         */\n        () => this.initChart()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    dispose() {\n        if (this.chart) {\n            this.chart.dispose();\n            this.chart = null;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    resize() {\n        if (this.chart) {\n            this.chart.resize();\n        }\n    }\n    /**\n     * @private\n     * @param {?} loading\n     * @return {?}\n     */\n    toggleLoading(loading) {\n        if (this.chart) {\n            loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n        }\n    }\n    /**\n     * @private\n     * @param {?} option\n     * @param {?=} opts\n     * @return {?}\n     */\n    setOption(option, opts) {\n        if (this.chart) {\n            this.chart.setOption(option, opts);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    refreshChart() {\n        this.dispose();\n        this.initChart();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createChart() {\n        this.currentWindowWidth = window.innerWidth;\n        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n        /** @type {?} */\n        const dom = this.el.nativeElement;\n        if (window && window.getComputedStyle) {\n            /** @type {?} */\n            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n            if ((!prop || prop === '0px') &&\n                (!dom.style.height || dom.style.height === '0px')) {\n                dom.style.height = '400px';\n            }\n        }\n        return this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => init(dom, this.theme, this.initOpts)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    initChart() {\n        this.onOptionsChange(this.options);\n        if (this.merge && this.chart) {\n            this.setOption(this.merge);\n        }\n    }\n    /**\n     * @private\n     * @param {?} opt\n     * @return {?}\n     */\n    onOptionsChange(opt) {\n        if (opt) {\n            if (!this.chart) {\n                this.chart = this.createChart();\n                this.chartInit.emit(this.chart);\n            }\n            this.chart.setOption(this.options, true);\n        }\n    }\n    // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n    /**\n     * @private\n     * @template T\n     * @param {?} eventName\n     * @return {?}\n     */\n    createLazyEvent(eventName) {\n        return (/** @type {?} */ (this.chartInit.pipe(switchMap((/**\n         * @param {?} chart\n         * @return {?}\n         */\n        (chart) => new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        observer => {\n            chart.on(eventName, (/**\n             * @param {?} data\n             * @return {?}\n             */\n            (data) => this.ngZone.run((/**\n             * @return {?}\n             */\n            () => observer.next(data)))));\n            return (/**\n             * @return {?}\n             */\n            () => chart.off(eventName));\n        })))))));\n    }\n}\nNgxEchartsDirective.Éµfac = function NgxEchartsDirective_Factory(t) { return new (t || NgxEchartsDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone)); };\nNgxEchartsDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: NgxEchartsDirective, selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]], inputs: { autoResize: \"autoResize\", loadingType: \"loadingType\", detectEventChanges: \"detectEventChanges\", options: \"options\", theme: \"theme\", loading: \"loading\", initOpts: \"initOpts\", merge: \"merge\", loadingOpts: \"loadingOpts\" }, outputs: { chartInit: \"chartInit\", chartClick: \"chartClick\", chartDblClick: \"chartDblClick\", chartMouseDown: \"chartMouseDown\", chartMouseMove: \"chartMouseMove\", chartMouseUp: \"chartMouseUp\", chartMouseOver: \"chartMouseOver\", chartMouseOut: \"chartMouseOut\", chartGlobalOut: \"chartGlobalOut\", chartContextMenu: \"chartContextMenu\", chartLegendSelectChanged: \"chartLegendSelectChanged\", chartLegendSelected: \"chartLegendSelected\", chartLegendUnselected: \"chartLegendUnselected\", chartLegendScroll: \"chartLegendScroll\", chartDataZoom: \"chartDataZoom\", chartDataRangeSelected: \"chartDataRangeSelected\", chartTimelineChanged: \"chartTimelineChanged\", chartTimelinePlayChanged: \"chartTimelinePlayChanged\", chartRestore: \"chartRestore\", chartDataViewChanged: \"chartDataViewChanged\", chartMagicTypeChanged: \"chartMagicTypeChanged\", chartPieSelectChanged: \"chartPieSelectChanged\", chartPieSelected: \"chartPieSelected\", chartPieUnselected: \"chartPieUnselected\", chartMapSelectChanged: \"chartMapSelectChanged\", chartMapSelected: \"chartMapSelected\", chartMapUnselected: \"chartMapUnselected\", chartAxisAreaSelected: \"chartAxisAreaSelected\", chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\", chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\", chartBrush: \"chartBrush\", chartBrushSelected: \"chartBrushSelected\", chartRendered: \"chartRendered\", chartFinished: \"chartFinished\" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });\n/** @nocollapse */\nNgxEchartsDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nNgxEchartsDirective.propDecorators = {\n    options: [{ type: Input }],\n    theme: [{ type: Input }],\n    loading: [{ type: Input }],\n    initOpts: [{ type: Input }],\n    merge: [{ type: Input }],\n    autoResize: [{ type: Input }],\n    loadingType: [{ type: Input }],\n    loadingOpts: [{ type: Input }],\n    detectEventChanges: [{ type: Input }],\n    chartInit: [{ type: Output }],\n    chartClick: [{ type: Output }],\n    chartDblClick: [{ type: Output }],\n    chartMouseDown: [{ type: Output }],\n    chartMouseMove: [{ type: Output }],\n    chartMouseUp: [{ type: Output }],\n    chartMouseOver: [{ type: Output }],\n    chartMouseOut: [{ type: Output }],\n    chartGlobalOut: [{ type: Output }],\n    chartContextMenu: [{ type: Output }],\n    chartLegendSelectChanged: [{ type: Output }],\n    chartLegendSelected: [{ type: Output }],\n    chartLegendUnselected: [{ type: Output }],\n    chartLegendScroll: [{ type: Output }],\n    chartDataZoom: [{ type: Output }],\n    chartDataRangeSelected: [{ type: Output }],\n    chartTimelineChanged: [{ type: Output }],\n    chartTimelinePlayChanged: [{ type: Output }],\n    chartRestore: [{ type: Output }],\n    chartDataViewChanged: [{ type: Output }],\n    chartMagicTypeChanged: [{ type: Output }],\n    chartPieSelectChanged: [{ type: Output }],\n    chartPieSelected: [{ type: Output }],\n    chartPieUnselected: [{ type: Output }],\n    chartMapSelectChanged: [{ type: Output }],\n    chartMapSelected: [{ type: Output }],\n    chartMapUnselected: [{ type: Output }],\n    chartAxisAreaSelected: [{ type: Output }],\n    chartFocusNodeAdjacency: [{ type: Output }],\n    chartUnfocusNodeAdjacency: [{ type: Output }],\n    chartBrush: [{ type: Output }],\n    chartBrushSelected: [{ type: Output }],\n    chartRendered: [{ type: Output }],\n    chartFinished: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'echarts, [echarts]'\n            }]\n    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.NgZone }]; }, { autoResize: [{\n            type: Input\n        }], loadingType: [{\n            type: Input\n        }], detectEventChanges: [{\n            type: Input\n        }], chartInit: [{\n            type: Output\n        }], chartClick: [{\n            type: Output\n        }], chartDblClick: [{\n            type: Output\n        }], chartMouseDown: [{\n            type: Output\n        }], chartMouseMove: [{\n            type: Output\n        }], chartMouseUp: [{\n            type: Output\n        }], chartMouseOver: [{\n            type: Output\n        }], chartMouseOut: [{\n            type: Output\n        }], chartGlobalOut: [{\n            type: Output\n        }], chartContextMenu: [{\n            type: Output\n        }], chartLegendSelectChanged: [{\n            type: Output\n        }], chartLegendSelected: [{\n            type: Output\n        }], chartLegendUnselected: [{\n            type: Output\n        }], chartLegendScroll: [{\n            type: Output\n        }], chartDataZoom: [{\n            type: Output\n        }], chartDataRangeSelected: [{\n            type: Output\n        }], chartTimelineChanged: [{\n            type: Output\n        }], chartTimelinePlayChanged: [{\n            type: Output\n        }], chartRestore: [{\n            type: Output\n        }], chartDataViewChanged: [{\n            type: Output\n        }], chartMagicTypeChanged: [{\n            type: Output\n        }], chartPieSelectChanged: [{\n            type: Output\n        }], chartPieSelected: [{\n            type: Output\n        }], chartPieUnselected: [{\n            type: Output\n        }], chartMapSelectChanged: [{\n            type: Output\n        }], chartMapSelected: [{\n            type: Output\n        }], chartMapUnselected: [{\n            type: Output\n        }], chartAxisAreaSelected: [{\n            type: Output\n        }], chartFocusNodeAdjacency: [{\n            type: Output\n        }], chartUnfocusNodeAdjacency: [{\n            type: Output\n        }], chartBrush: [{\n            type: Output\n        }], chartBrushSelected: [{\n            type: Output\n        }], chartRendered: [{\n            type: Output\n        }], chartFinished: [{\n            type: Output\n        }], options: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }], loading: [{\n            type: Input\n        }], initOpts: [{\n            type: Input\n        }], merge: [{\n            type: Input\n        }], loadingOpts: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    NgxEchartsDirective.prototype.options;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.theme;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.loading;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.initOpts;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.merge;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.autoResize;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.loadingType;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.loadingOpts;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.detectEventChanges;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartInit;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartClick;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartDblClick;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMouseDown;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMouseMove;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMouseUp;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMouseOver;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMouseOut;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartGlobalOut;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartContextMenu;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartLegendSelectChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartLegendSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartLegendUnselected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartLegendScroll;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartDataZoom;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartDataRangeSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartTimelineChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartTimelinePlayChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartRestore;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartDataViewChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMagicTypeChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartPieSelectChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartPieSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartPieUnselected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMapSelectChanged;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMapSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartMapUnselected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartAxisAreaSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartFocusNodeAdjacency;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartUnfocusNodeAdjacency;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartBrush;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartBrushSelected;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartRendered;\n    /** @type {?} */\n    NgxEchartsDirective.prototype.chartFinished;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.chart;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.currentOffsetWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.currentOffsetHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.currentWindowWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.resizeSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.el;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxEchartsDirective.prototype.ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxEchartsModule {\n}\nNgxEchartsModule.Éµfac = function NgxEchartsModule_Factory(t) { return new (t || NgxEchartsModule)(); };\nNgxEchartsModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: NgxEchartsModule });\nNgxEchartsModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ imports: [[]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [],\n                declarations: [\n                    NgxEchartsDirective\n                ],\n                exports: [\n                    NgxEchartsDirective\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxEchartsModule, { declarations: [NgxEchartsDirective], exports: [NgxEchartsDirective] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxEchartsModule, NgxEchartsDirective as Éµa };\n\n//# sourceMappingURL=ngx-echarts.js.map"]},"metadata":{},"sourceType":"module"}