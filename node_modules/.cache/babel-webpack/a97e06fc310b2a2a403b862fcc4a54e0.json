{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@angular/core\");\n\nvar forms_1 = require(\"@angular/forms\");\n\nvar platform_browser_1 = require(\"@angular/platform-browser\");\n\nvar textMaskCore_1 = require(\"text-mask-core/dist/textMaskCore\");\n\nvar ɵngcc0 = require('@angular/core');\n\nvar TextMaskConfig = function () {\n  function TextMaskConfig() {}\n\n  return TextMaskConfig;\n}();\n\nexports.TextMaskConfig = TextMaskConfig;\nexports.MASKEDINPUT_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return MaskedInputDirective;\n  }),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\n\nfunction _isAndroid() {\n  var userAgent = platform_browser_1.ɵgetDOM() ? platform_browser_1.ɵgetDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\nvar MaskedInputDirective = function () {\n  function MaskedInputDirective(_renderer, _elementRef, _compositionMode) {\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._compositionMode = _compositionMode;\n    this.textMaskConfig = {\n      mask: [],\n      guide: true,\n      placeholderChar: '_',\n      pipe: undefined,\n      keepCharPositions: false\n    };\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n    /** Whether the user is creating a composition string (IME events). */\n\n\n    this._composing = false;\n\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n\n  MaskedInputDirective.prototype.ngOnChanges = function (changes) {\n    this._setupMask(true);\n\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value);\n    }\n  };\n\n  MaskedInputDirective.prototype.writeValue = function (value) {\n    this._setupMask(); // set the initial value for cases where the mask is disabled\n\n\n    var normalizedValue = value == null ? '' : value;\n\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value);\n    }\n  };\n\n  MaskedInputDirective.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  MaskedInputDirective.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  };\n\n  MaskedInputDirective.prototype._handleInput = function (value) {\n    if (!this._compositionMode || this._compositionMode && !this._composing) {\n      this._setupMask();\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value); // get the updated value\n\n        value = this.inputElement.value;\n        this.onChange(value);\n      }\n    }\n  };\n\n  MaskedInputDirective.prototype._setupMask = function (create) {\n    if (create === void 0) {\n      create = false;\n    }\n\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement;\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n      }\n    }\n\n    if (this.inputElement && create) {\n      this.textMaskInputElement = textMaskCore_1.createTextMaskInputElement(Object.assign({\n        inputElement: this.inputElement\n      }, this.textMaskConfig));\n    }\n  };\n\n  MaskedInputDirective.prototype._compositionStart = function () {\n    this._composing = true;\n  };\n\n  MaskedInputDirective.prototype._compositionEnd = function (value) {\n    this._composing = false;\n    this._compositionMode && this._handleInput(value);\n  };\n  /** @nocollapse */\n\n\n  MaskedInputDirective.ctorParameters = function () {\n    return [{\n      type: core_1.Renderer2\n    }, {\n      type: core_1.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: core_1.Optional\n      }, {\n        type: core_1.Inject,\n        args: [forms_1.COMPOSITION_BUFFER_MODE]\n      }]\n    }];\n  };\n\n  MaskedInputDirective.propDecorators = {\n    'textMaskConfig': [{\n      type: core_1.Input,\n      args: ['textMask']\n    }]\n  };\n\n  MaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(t) {\n    return new (t || MaskedInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forms_1.COMPOSITION_BUFFER_MODE, 8));\n  };\n\n  MaskedInputDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MaskedInputDirective,\n    selectors: [[\"\", \"textMask\", \"\"]],\n    hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MaskedInputDirective_input_HostBindingHandler($event) {\n          return ctx._handleInput($event.target.value);\n        })(\"blur\", function MaskedInputDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"compositionstart\", function MaskedInputDirective_compositionstart_HostBindingHandler() {\n          return ctx._compositionStart();\n        })(\"compositionend\", function MaskedInputDirective_compositionend_HostBindingHandler($event) {\n          return ctx._compositionEnd($event.target.value);\n        });\n      }\n    },\n    inputs: {\n      textMaskConfig: [\"textMask\", \"textMaskConfig\"]\n    },\n    exportAs: [\"textMask\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([exports.MASKEDINPUT_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskedInputDirective, [{\n      type: core_1.Directive,\n      args: [{\n        host: {\n          '(input)': '_handleInput($event.target.value)',\n          '(blur)': 'onTouched()',\n          '(compositionstart)': '_compositionStart()',\n          '(compositionend)': '_compositionEnd($event.target.value)'\n        },\n        selector: '[textMask]',\n        exportAs: 'textMask',\n        providers: [exports.MASKEDINPUT_VALUE_ACCESSOR]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.Renderer2\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: undefined,\n        decorators: [{\n          type: core_1.Optional\n        }, {\n          type: core_1.Inject,\n          args: [forms_1.COMPOSITION_BUFFER_MODE]\n        }]\n      }];\n    }, {\n      textMaskConfig: [{\n        type: core_1.Input,\n        args: ['textMask']\n      }]\n    });\n  })();\n\n  return MaskedInputDirective;\n}();\n\nexports.MaskedInputDirective = MaskedInputDirective;\n\nvar TextMaskModule = function () {\n  function TextMaskModule() {}\n  /** @nocollapse */\n\n\n  TextMaskModule.ctorParameters = function () {\n    return [];\n  };\n\n  TextMaskModule.ɵfac = function TextMaskModule_Factory(t) {\n    return new (t || TextMaskModule)();\n  };\n\n  TextMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TextMaskModule\n  });\n  TextMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextMaskModule, [{\n      type: core_1.NgModule,\n      args: [{\n        declarations: [MaskedInputDirective],\n        exports: [MaskedInputDirective]\n      }]\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextMaskModule, {\n      declarations: [MaskedInputDirective],\n      exports: [MaskedInputDirective]\n    });\n  })();\n\n  return TextMaskModule;\n}();\n\nexports.TextMaskModule = TextMaskModule;\n\nvar textMaskCore_2 = require(\"text-mask-core/dist/textMaskCore\");\n\nexports.conformToMask = textMaskCore_2.conformToMask; //# sourceMappingURL=angular2TextMask.js.map","map":{"version":3,"sources":["E:/_Projet/Cnss/FISC_DECLARATION_APP_Client/node_modules/angular2-text-mask/dist/angular2TextMask.js"],"names":["Object","defineProperty","exports","value","core_1","require","forms_1","platform_browser_1","textMaskCore_1","ɵngcc0","TextMaskConfig","MASKEDINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MaskedInputDirective","multi","_isAndroid","userAgent","ɵgetDOM","getUserAgent","test","toLowerCase","_renderer","_elementRef","_compositionMode","textMaskConfig","mask","guide","placeholderChar","pipe","undefined","keepCharPositions","onChange","_","onTouched","_composing","prototype","ngOnChanges","changes","_setupMask","textMaskInputElement","update","inputElement","writeValue","normalizedValue","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","_handleInput","create","tagName","toUpperCase","getElementsByTagName","createTextMaskInputElement","assign","_compositionStart","_compositionEnd","ctorParameters","type","Renderer2","ElementRef","decorators","Optional","Inject","args","COMPOSITION_BUFFER_MODE","propDecorators","Input","ɵfac","MaskedInputDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","MaskedInputDirective_HostBindings","rf","ctx","ɵɵlistener","MaskedInputDirective_input_HostBindingHandler","$event","target","MaskedInputDirective_blur_HostBindingHandler","MaskedInputDirective_compositionstart_HostBindingHandler","MaskedInputDirective_compositionend_HostBindingHandler","inputs","exportAs","features","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","Directive","host","selector","providers","TextMaskModule","TextMaskModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","NgModule","declarations","ngJitMode","ɵɵsetNgModuleScope","textMaskCore_2","conformToMask"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar textMaskCore_1 = require(\"text-mask-core/dist/textMaskCore\");\nvar ɵngcc0 = require('@angular/core');\nvar TextMaskConfig = /** @class */ (function () {\n    function TextMaskConfig() {\n    }\n    return TextMaskConfig;\n}());\nexports.TextMaskConfig = TextMaskConfig;\nexports.MASKEDINPUT_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return MaskedInputDirective; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    var userAgent = platform_browser_1.ɵgetDOM() ? platform_browser_1.ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\nvar MaskedInputDirective = /** @class */ (function () {\n    function MaskedInputDirective(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.textMaskConfig = {\n            mask: [],\n            guide: true,\n            placeholderChar: '_',\n            pipe: undefined,\n            keepCharPositions: false,\n        };\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    MaskedInputDirective.prototype.ngOnChanges = function (changes) {\n        this._setupMask(true);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.value);\n        }\n    };\n    MaskedInputDirective.prototype.writeValue = function (value) {\n        this._setupMask();\n        // set the initial value for cases where the mask is disabled\n        var normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(value);\n        }\n    };\n    MaskedInputDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    MaskedInputDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    MaskedInputDirective.prototype._handleInput = function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this._setupMask();\n            if (this.textMaskInputElement !== undefined) {\n                this.textMaskInputElement.update(value);\n                // get the updated value\n                value = this.inputElement.value;\n                this.onChange(value);\n            }\n        }\n    };\n    MaskedInputDirective.prototype._setupMask = function (create) {\n        if (create === void 0) { create = false; }\n        if (!this.inputElement) {\n            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n                // `textMask` directive is used directly on an input element\n                this.inputElement = this._elementRef.nativeElement;\n            }\n            else {\n                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n            }\n        }\n        if (this.inputElement && create) {\n            this.textMaskInputElement = textMaskCore_1.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\n        }\n    };\n    MaskedInputDirective.prototype._compositionStart = function () { this._composing = true; };\n    MaskedInputDirective.prototype._compositionEnd = function (value) {\n        this._composing = false;\n        this._compositionMode && this._handleInput(value);\n    };\n    /** @nocollapse */\n    MaskedInputDirective.ctorParameters = function () { return [\n        { type: core_1.Renderer2, },\n        { type: core_1.ElementRef, },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [forms_1.COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    MaskedInputDirective.propDecorators = {\n        'textMaskConfig': [{ type: core_1.Input, args: ['textMask',] },],\n    };\nMaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(t) { return new (t || MaskedInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forms_1.COMPOSITION_BUFFER_MODE, 8)); };\nMaskedInputDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MaskedInputDirective, selectors: [[\"\", \"textMask\", \"\"]], hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MaskedInputDirective_input_HostBindingHandler($event) { return ctx._handleInput($event.target.value); })(\"blur\", function MaskedInputDirective_blur_HostBindingHandler() { return ctx.onTouched(); })(\"compositionstart\", function MaskedInputDirective_compositionstart_HostBindingHandler() { return ctx._compositionStart(); })(\"compositionend\", function MaskedInputDirective_compositionend_HostBindingHandler($event) { return ctx._compositionEnd($event.target.value); });\n    } }, inputs: { textMaskConfig: [\"textMask\", \"textMaskConfig\"] }, exportAs: [\"textMask\"], features: [ɵngcc0.ɵɵProvidersFeature([exports.MASKEDINPUT_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskedInputDirective, [{\n        type: core_1.Directive,\n        args: [{\n                host: {\n                    '(input)': '_handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '_compositionStart()',\n                    '(compositionend)': '_compositionEnd($event.target.value)'\n                },\n                selector: '[textMask]',\n                exportAs: 'textMask',\n                providers: [exports.MASKEDINPUT_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: core_1.Optional\n            }, {\n                type: core_1.Inject,\n                args: [forms_1.COMPOSITION_BUFFER_MODE]\n            }] }]; }, { textMaskConfig: [{\n            type: core_1.Input,\n            args: ['textMask']\n        }] }); })();\n    return MaskedInputDirective;\n}());\nexports.MaskedInputDirective = MaskedInputDirective;\nvar TextMaskModule = /** @class */ (function () {\n    function TextMaskModule() {\n    }\n    /** @nocollapse */\n    TextMaskModule.ctorParameters = function () { return []; };\nTextMaskModule.ɵfac = function TextMaskModule_Factory(t) { return new (t || TextMaskModule)(); };\nTextMaskModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextMaskModule });\nTextMaskModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextMaskModule, [{\n        type: core_1.NgModule,\n        args: [{\n                declarations: [MaskedInputDirective],\n                exports: [MaskedInputDirective]\n            }]\n    }], function () { return []; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextMaskModule, { declarations: [MaskedInputDirective], exports: [MaskedInputDirective] }); })();\n    return TextMaskModule;\n}());\nexports.TextMaskModule = TextMaskModule;\nvar textMaskCore_2 = require(\"text-mask-core/dist/textMaskCore\");\nexports.conformToMask = textMaskCore_2.conformToMask;\n\n//# sourceMappingURL=angular2TextMask.js.map"]},"metadata":{},"sourceType":"script"}