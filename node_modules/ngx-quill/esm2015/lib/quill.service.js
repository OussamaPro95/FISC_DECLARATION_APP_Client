import { __awaiter } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Injectable, Inject, Injector } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
import * as ɵngcc0 from '@angular/core';
export class QuillService {
    constructor(injector, config) {
        this.config = config;
        this.count = 0;
        this.document = injector.get(DOCUMENT);
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    getQuill() {
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                // Quill adds events listeners on import https://github.com/quilljs/quill/blob/develop/core/emitter.js#L8
                // We'd want to use the unpatched `addEventListener` method to have all event callbacks to be run outside of zone.
                // We don't know yet if the `zone.js` is used or not, just save the value to restore it back further.
                const maybePatchedAddEventListener = this.document.addEventListener;
                // There're 2 types of Angular applications:
                // 1) zone-full (by default)
                // 2) zone-less
                // The developer can avoid importing the `zone.js` package and tells Angular that he/she is responsible for running
                // the change detection by himself. This is done by "nooping" the zone through `CompilerOptions` when bootstrapping
                // the root module. We fallback to `document.addEventListener` if `__zone_symbol__addEventListener` is not defined,
                // this means the `zone.js` is not imported.
                // The `__zone_symbol__addEventListener` is basically a native DOM API, which is not patched by zone.js, thus not even going
                // through the `zone.js` task lifecycle. You can also access the native DOM API as follows `target[Zone.__symbol__('methodName')]`.
                // eslint-disable-next-line @typescript-eslint/dot-notation
                this.document.addEventListener = this.document['__zone_symbol__addEventListener'] || this.document.addEventListener;
                const quillImport = yield import('quill');
                this.document.addEventListener = maybePatchedAddEventListener;
                this.Quill = (quillImport.default ? quillImport.default : quillImport);
                // Only register custom options and modules once
                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {
                    const newCustomOption = this.Quill.import(customOption.import);
                    newCustomOption.whitelist = customOption.whitelist;
                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);
                });
                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {
                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);
                });
                resolve(this.Quill);
            }));
        }
        return this.$importPromise;
    }
}
QuillService.ɵfac = function QuillService_Factory(t) { return new (t || QuillService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN)); };
QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
QuillService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXF1aWxsL3NyYy9saWIvcXVpbGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUU1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDakQsT0FBTyxFQUFFLGtCQUFrQixFQUFlLE1BQU0sMkJBQTJCLENBQUE7QUFDM0U7QUFHQzs7QUFDRCxNQUFNLE9BQU8sWUFBWTtBQUN6QixJQU1FLFlBQ0UsUUFBa0IsRUFDaUIsTUFBbUI7QUFDdkQsUUFEb0MsV0FBTSxHQUFOLE1BQU0sQ0FBYTtBQUMxRCxRQU5VLFVBQUssR0FBRyxDQUFDLENBQUE7QUFDbkIsUUFNSSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDMUMsUUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN0QixZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUE7QUFDL0MsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ2hCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDekMsWUFBTSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLENBQU8sT0FBTyxFQUFFLEVBQUU7QUFDYjtBQUE0QixnQkFBakUseUdBQXlHO0FBQ2pILGdCQUFRLGtIQUFrSDtBQUMxSCxnQkFBUSxxR0FBcUc7QUFDN0csZ0JBQVEsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFBO0FBQzNFLGdCQUFRLDRDQUE0QztBQUNwRCxnQkFBUSw0QkFBNEI7QUFDcEMsZ0JBQVEsZUFBZTtBQUN2QixnQkFBUSxtSEFBbUg7QUFDM0gsZ0JBQVEsbUhBQW1IO0FBQzNILGdCQUFRLG1IQUFtSDtBQUMzSCxnQkFBUSw0Q0FBNEM7QUFDcEQsZ0JBQVEsNEhBQTRIO0FBQ3BJLGdCQUFRLG1JQUFtSTtBQUMzSSxnQkFBUSwyREFBMkQ7QUFDbkUsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlDQUFpQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQTtBQUMzSCxnQkFBUSxNQUFNLFdBQVcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNqRCxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixHQUFHLDRCQUE0QixDQUFBO0FBQ3JFLGdCQUNRLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQVEsQ0FBQTtBQUNyRixnQkFDUSxnREFBZ0Q7QUFDeEQsZ0JBQVEsTUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDNUQsb0JBQVUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3hFLG9CQUFVLGVBQWUsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQTtBQUM1RCxvQkFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtBQUMvRixnQkFBUSxDQUFDLENBQUMsQ0FBQTtBQUNWLGdCQUNRLE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUMsY0FBYyxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7QUFDdEUsb0JBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFDOUYsZ0JBQVEsQ0FBQyxDQUFDLENBQUE7QUFDVixnQkFDUSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzNCLFlBQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNSLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtBQUM5QixJQUFFLENBQUM7QUFDSDtnS0FBQztBQUNELDZOQTNESztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUlJLFlBVGEsUUFBUTtlQU1uQyxVQUFVLEVBQUUsTUFBTSxjQUNuQiwvQ0FQd0MsNENBaUJwQyxNQUFNLFNBQUMsa0JBQWtCO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgZGVmYXVsdE1vZHVsZXMgfSBmcm9tICcuL3F1aWxsLWRlZmF1bHRzJ1xuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOLCBRdWlsbENvbmZpZyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgcHJpdmF0ZSBRdWlsbCE6IGFueVxuICBwcml2YXRlICRpbXBvcnRQcm9taXNlITogUHJvbWlzZTxhbnk+XG4gIHByaXZhdGUgY291bnQgPSAwXG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBJbmplY3QoUVVJTExfQ09ORklHX1RPS0VOKSBwdWJsaWMgY29uZmlnOiBRdWlsbENvbmZpZ1xuICApIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gaW5qZWN0b3IuZ2V0KERPQ1VNRU5UKVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5jb25maWcgPSB7IG1vZHVsZXM6IGRlZmF1bHRNb2R1bGVzIH1cbiAgICB9XG4gIH1cblxuICBnZXRRdWlsbCgpIHtcbiAgICB0aGlzLmNvdW50KytcbiAgICBpZiAoIXRoaXMuUXVpbGwgJiYgdGhpcy5jb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy4kaW1wb3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIC8vIFF1aWxsIGFkZHMgZXZlbnRzIGxpc3RlbmVycyBvbiBpbXBvcnQgaHR0cHM6Ly9naXRodWIuY29tL3F1aWxsanMvcXVpbGwvYmxvYi9kZXZlbG9wL2NvcmUvZW1pdHRlci5qcyNMOFxuICAgICAgICAvLyBXZSdkIHdhbnQgdG8gdXNlIHRoZSB1bnBhdGNoZWQgYGFkZEV2ZW50TGlzdGVuZXJgIG1ldGhvZCB0byBoYXZlIGFsbCBldmVudCBjYWxsYmFja3MgdG8gYmUgcnVuIG91dHNpZGUgb2Ygem9uZS5cbiAgICAgICAgLy8gV2UgZG9uJ3Qga25vdyB5ZXQgaWYgdGhlIGB6b25lLmpzYCBpcyB1c2VkIG9yIG5vdCwganVzdCBzYXZlIHRoZSB2YWx1ZSB0byByZXN0b3JlIGl0IGJhY2sgZnVydGhlci5cbiAgICAgICAgY29uc3QgbWF5YmVQYXRjaGVkQWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICAvLyBUaGVyZSdyZSAyIHR5cGVzIG9mIEFuZ3VsYXIgYXBwbGljYXRpb25zOlxuICAgICAgICAvLyAxKSB6b25lLWZ1bGwgKGJ5IGRlZmF1bHQpXG4gICAgICAgIC8vIDIpIHpvbmUtbGVzc1xuICAgICAgICAvLyBUaGUgZGV2ZWxvcGVyIGNhbiBhdm9pZCBpbXBvcnRpbmcgdGhlIGB6b25lLmpzYCBwYWNrYWdlIGFuZCB0ZWxscyBBbmd1bGFyIHRoYXQgaGUvc2hlIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nXG4gICAgICAgIC8vIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIGJ5IGhpbXNlbGYuIFRoaXMgaXMgZG9uZSBieSBcIm5vb3BpbmdcIiB0aGUgem9uZSB0aHJvdWdoIGBDb21waWxlck9wdGlvbnNgIHdoZW4gYm9vdHN0cmFwcGluZ1xuICAgICAgICAvLyB0aGUgcm9vdCBtb2R1bGUuIFdlIGZhbGxiYWNrIHRvIGBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyYCBpZiBgX196b25lX3N5bWJvbF9fYWRkRXZlbnRMaXN0ZW5lcmAgaXMgbm90IGRlZmluZWQsXG4gICAgICAgIC8vIHRoaXMgbWVhbnMgdGhlIGB6b25lLmpzYCBpcyBub3QgaW1wb3J0ZWQuXG4gICAgICAgIC8vIFRoZSBgX196b25lX3N5bWJvbF9fYWRkRXZlbnRMaXN0ZW5lcmAgaXMgYmFzaWNhbGx5IGEgbmF0aXZlIERPTSBBUEksIHdoaWNoIGlzIG5vdCBwYXRjaGVkIGJ5IHpvbmUuanMsIHRodXMgbm90IGV2ZW4gZ29pbmdcbiAgICAgICAgLy8gdGhyb3VnaCB0aGUgYHpvbmUuanNgIHRhc2sgbGlmZWN5Y2xlLiBZb3UgY2FuIGFsc28gYWNjZXNzIHRoZSBuYXRpdmUgRE9NIEFQSSBhcyBmb2xsb3dzIGB0YXJnZXRbWm9uZS5fX3N5bWJvbF9fKCdtZXRob2ROYW1lJyldYC5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9kb3Qtbm90YXRpb25cbiAgICAgICAgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyID0gdGhpcy5kb2N1bWVudFsnX196b25lX3N5bWJvbF9fYWRkRXZlbnRMaXN0ZW5lciddIHx8IHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICBjb25zdCBxdWlsbEltcG9ydCA9IGF3YWl0IGltcG9ydCgncXVpbGwnKVxuICAgICAgICB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPSBtYXliZVBhdGNoZWRBZGRFdmVudExpc3RlbmVyXG5cbiAgICAgICAgdGhpcy5RdWlsbCA9IChxdWlsbEltcG9ydC5kZWZhdWx0ID8gcXVpbGxJbXBvcnQuZGVmYXVsdCA6IHF1aWxsSW1wb3J0KSBhcyBhbnlcblxuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGN1c3RvbSBvcHRpb25zIGFuZCBtb2R1bGVzIG9uY2VcbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tT3B0aW9ucz8uZm9yRWFjaCgoY3VzdG9tT3B0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3Q3VzdG9tT3B0aW9uID0gdGhpcy5RdWlsbC5pbXBvcnQoY3VzdG9tT3B0aW9uLmltcG9ydClcbiAgICAgICAgICBuZXdDdXN0b21PcHRpb24ud2hpdGVsaXN0ID0gY3VzdG9tT3B0aW9uLndoaXRlbGlzdFxuICAgICAgICAgIHRoaXMuUXVpbGwucmVnaXN0ZXIobmV3Q3VzdG9tT3B0aW9uLCB0cnVlLCB0aGlzLmNvbmZpZy5zdXBwcmVzc0dsb2JhbFJlZ2lzdGVyV2FybmluZylcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNvbmZpZy5jdXN0b21Nb2R1bGVzPy5mb3JFYWNoKCh7aW1wbGVtZW50YXRpb24sIHBhdGh9KSA9PiB7XG4gICAgICAgICAgdGhpcy5RdWlsbC5yZWdpc3RlcihwYXRoLCBpbXBsZW1lbnRhdGlvbiwgdGhpcy5jb25maWcuc3VwcHJlc3NHbG9iYWxSZWdpc3Rlcldhcm5pbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVzb2x2ZSh0aGlzLlF1aWxsKVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGltcG9ydFByb21pc2VcbiAgfVxufVxuIl19